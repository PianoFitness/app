# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    lines_longer_than_80_chars: false # Disable 80-char limit (we'll use 120)
    prefer_single_quotes: false # Disable single quote preference - use double quotes
    prefer_double_quotes: true # Use double quotes for strings
    unnecessary_breaks: false # Disable unnecessary breaks warning for switch statements
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule

# Custom analyzer rules
analyzer:
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

# Set line length to 120 characters for dart format
dart_code_metrics:
  metrics:
    lines-of-code: 120
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
